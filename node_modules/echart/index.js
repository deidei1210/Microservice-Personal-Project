var path = require('path')
var Koa = require('koa')
var Router = require('koa-router')
var app = new Koa()
var router = new Router()

function output (r) {
    var data = (typeof r === 'function')
        ? r.call(this, this.request, this.response) : r
    data = data && JSON.stringify(data, '', 4)
    var callback = this.request.query.callback
    if (data && callback) {
        data = `${callback}(${data})`
        this.response.set('Content-Type', 'application/js')
    }
    else {
        this.response.set('Content-Type', 'application/json')
    }

    if (data) {
        this.body = data
    }
}

function handler (p) {
    try {
        output.call(this, require(p))
        // 不缓存模块
        if (require.cache[`${p}.json`]) {
            delete require.cache[`${p}.json`]
        }
        else {
            delete require.cache[`${p}.js`]
        }
    }
    catch (ex) {
        console.error(ex.message)
        output.call(this, {status: 1, message: ex.message})
    }
}

exports.start = function (config) {
    config = config || {}
    const tasks = config.tasks
    const root = config.mockRoot || process.cwd()
    const mapping = config.mapping || []
    const port = config.port || 3000

    // 重构路径解析
    if (config.tasks) {
        for (const task in tasks) {
            const getTarget = tasks[task]
            tasks[task] = function (ctx, next) {
                let p = getTarget(ctx, next)
                if (typeof p === 'string') {
                    p = path.resolve(root, p)
                    return handler.call(ctx, p)
                }
                else {
                    output.call(ctx, p)
                }
            }
        }
    }

    // 路由规则解析
    for (const task in mapping) {
        if (tasks[task]) {
            const proc = tasks[task]
            const list = mapping[task]
            list.forEach(url => {
                router.get(url, proc)
                router.post(url, proc)
            })
        }
    }

    app
      .use(router.routes())
      .use(router.allowedMethods())

    app.listen(port)
}