{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createBlock as _createBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"map-weather-container\"\n};\nconst _hoisted_2 = {\n  class: \"map\"\n};\nconst _hoisted_3 = {\n  class: \"zoom-controls\"\n};\nconst _hoisted_4 = {\n  class: \"showAddress\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bm_label = _resolveComponent(\"bm-label\");\n  const _component_bm_marker = _resolveComponent(\"bm-marker\");\n  const _component_bm_walking = _resolveComponent(\"bm-walking\");\n  const _component_baidu_map = _resolveComponent(\"baidu-map\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 用于显示地图 \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_baidu_map, {\n    class: \"map\",\n    center: $data.center,\n    zoom: $data.zoom,\n    \"scroll-wheel-zoom\": true,\n    onClick: $options.handleMapClick\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" 给特殊地点加上一些标注和说明 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.markers, (marker, index) => {\n      return _openBlock(), _createBlock(_component_bm_marker, {\n        key: index,\n        position: marker.position,\n        dragging: false,\n        onClick: $event => $options.handleMarkerClick(marker, index)\n      }, {\n        default: _withCtx(() => [_createVNode(_component_bm_label, {\n          content: marker.content,\n          labelStyle: {\n            color: 'red',\n            fontSize: '15px'\n          },\n          offset: {\n            width: -35,\n            height: 30\n          }\n        }, null, 8 /* PROPS */, [\"content\"])]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"position\", \"onClick\"]);\n    }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" 地图类型切换 \"), _createCommentVNode(\" <bm-map-type :map-types=\\\"['BMAP_NORMAL_MAP', 'BMAP_HYBRID_MAP']\\\" anchor=\\\"BMAP_ANCHOR_TOP_LEFT\\\"></bm-map-type> \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n      onClick: _cache[0] || (_cache[0] = (...args) => $options.zoomIn && $options.zoomIn(...args))\n    }, \"放大\"), _createElementVNode(\"button\", {\n      onClick: _cache[1] || (_cache[1] = (...args) => $options.zoomOut && $options.zoomOut(...args))\n    }, \"缩小\")]), _createCommentVNode(\" 显示当前用户点击的地点的经纬度 \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", null, \"纬度：\" + _toDisplayString($data.clickLat), 1 /* TEXT */), _createElementVNode(\"div\", null, \"经度：\" + _toDisplayString($data.clickLng), 1 /* TEXT */), _createElementVNode(\"div\", null, \"地址：\" + _toDisplayString($data.clickAddress), 1 /* TEXT */)]), _createCommentVNode(\" 步行路线 \"), $data.planRoute ? (_openBlock(), _createBlock(_component_bm_walking, {\n      key: 0,\n      start: $data.startPosition,\n      end: $data.endPosition,\n      location: \"上海\",\n      \"auto-viewport\": true,\n      selectFirstResult: true,\n      panel: true\n    }, null, 8 /* PROPS */, [\"start\", \"end\"])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 公交线路查询 \"), _createCommentVNode(\" <bm-bus keyword=\\\"123路公交车\\\" :auto-viewport=\\\"true\\\" location=\\\"上海\\\"></bm-bus> \")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"center\", \"zoom\", \"onClick\"])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_createVNode","_component_baidu_map","center","$data","zoom","onClick","$options","handleMapClick","_Fragment","_renderList","markers","marker","index","_createBlock","_component_bm_marker","key","position","dragging","$event","handleMarkerClick","_component_bm_label","content","labelStyle","color","fontSize","offset","width","height","_hoisted_3","_cache","args","zoomIn","zoomOut","_hoisted_4","_toDisplayString","clickLat","clickLng","clickAddress","planRoute","_component_bm_walking","start","startPosition","end","endPosition","location","selectFirstResult","panel"],"sources":["/Users/mac/Desktop/作业/微服务架构/Microservice-Personal-Project/src/components/map.vue"],"sourcesContent":["<template>\n  <div class=\"map-weather-container\">\n    <!-- 用于显示地图 -->\n    <div class=\"map\">\n      <baidu-map class=\"map\" :center=\"center\" :zoom=\"zoom\" :scroll-wheel-zoom=true @click=\"handleMapClick\">\n\n        <!-- 给特殊地点加上一些标注和说明 -->\n        <bm-marker v-for=\"(marker, index) in markers\" :key=\"index\" :position=\"marker.position\" :dragging=\"false\"\n          @click=\"handleMarkerClick(marker, index)\">\n          <bm-label :content=\"marker.content\" :labelStyle=\"{ color: 'red', fontSize: '15px' }\"\n            :offset=\"{ width: -35, height: 30 }\"></bm-label>\n        </bm-marker>\n        <!-- 地图类型切换 -->\n        <!-- <bm-map-type :map-types=\"['BMAP_NORMAL_MAP', 'BMAP_HYBRID_MAP']\" anchor=\"BMAP_ANCHOR_TOP_LEFT\"></bm-map-type> -->\n\n        <div class=\"zoom-controls\">\n          <button @click=\"zoomIn\">放大</button>\n          <button @click=\"zoomOut\">缩小</button>\n        </div>\n        <!-- 显示当前用户点击的地点的经纬度 -->\n        <div class=\"showAddress\">\n          <div>纬度：{{ clickLat }}</div>\n          <div>经度：{{ clickLng }}</div>\n          <div>地址：{{ clickAddress }}</div>\n        </div>\n\n        <!-- 步行路线 -->\n        <bm-walking v-if=\"planRoute\" :start=\"startPosition\" :end=\"endPosition\" location=\"上海\"\n          :auto-viewport=\"true\" :selectFirstResult=\"true\" :panel=\"true\"></bm-walking>\n        <!-- 公交线路查询 -->\n        <!-- <bm-bus keyword=\"123路公交车\" :auto-viewport=\"true\" location=\"上海\"></bm-bus> -->\n      </baidu-map>\n    </div>\n\n  </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport {\n  BaiduMap,\n  BmWalking,\n  BmInfoWindow,\n  BmBoundary,\n  BmScale,\n  BmMarker,\n  BmLabel,\n  BmLocalSearch,\n  BmCircle,\n  BmBus\n} from \"vue-baidu-map-3x\";\nimport { ref, onMounted } from \"vue\";\nimport axios from \"axios\";\n// import { Configuration, OpenAIApi } from \"openai\"; // 根据实际情况调整库的导入路径\nimport OpenAI from \"openai\";\nimport Qs from 'qs';\nexport default {\n  components: {\n    BaiduMap,\n    BmWalking,\n    BmInfoWindow,\n    BmBoundary,\n    BmScale,\n    BmMarker,\n    BmLabel,\n    BmLocalSearch,\n    BmCircle,\n    BmBus\n  },\n\n  data() {\n    return {\n      center: { lat: 31.23, lng: 121.474 },\n      zoom: 15,\n      //一些景点坐标点\n      markers: [\n        {\n          position: { lng: 121.4912, lat: 31.2438 },\n          content: \"南京东路\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4811, lat: 31.2346 },\n          content: \"人民广场\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5073, lat: 31.2437 },\n          content: \"陆家嘴\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4972, lat: 31.2429 },\n          content: \"外滩\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4972, lat: 31.2489 },\n          content: \"外白渡桥\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4896, lat: 31.2482 },\n          content: \"乍浦路桥\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4943, lat: 31.2343 },\n          content: \"豫园\",\n          show: false,\n        },\n        {\n          position: { lng: 121.483, lat: 31.2342 },\n          content: \"上海博物馆\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4746, lat: 31.2266 },\n          content: \"淮海中路\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5083, lat: 31.2469 },\n          content: \"东方明珠\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4526, lat: 31.2292 },\n          content: \"静安寺\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4449, lat: 31.211 },\n          content: \"武康大楼\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4455, lat: 31.2102 },\n          content: \"宋庆龄故居\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4427, lat: 31.2015 },\n          content: \"徐家汇\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4759, lat: 31.2139 },\n          content: \"田子坊\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4812, lat: 31.2229 },\n          content: \"中共一大会址\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5076, lat: 31.2132 },\n          content: \"南浦大桥\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4691, lat: 31.2424 },\n          content: \"上海自然博物馆\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4761, lat: 31.2199 },\n          content: \"思南公馆\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4761, lat: 31.2199 },\n          content: \"四川北路\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4761, lat: 31.2199 },\n          content: \"思南公馆\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4899, lat: 31.2776 },\n          content: \"鲁迅公园\",\n          show: false,\n        },\n        {\n          position: { lng: 121.4908, lat: 31.2581 },\n          content: \"四川北路\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5055, lat: 31.2529 },\n          content: \"北外滩\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5331, lat: 31.2561 },\n          content: \"杨浦滨江\",\n          show: false,\n        },\n        {\n          position: { lng: 121.49, lat: 31.2711 },\n          content: \"甜爱路\",\n          show: false,\n        },\n        {\n          position: { lng: 121.488, lat: 31.2696 },\n          content: \"多伦路文化名人街\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5088, lat: 31.2888 },\n          content: \"同济大学\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5055, lat: 31.2529 },\n          content: \"北外滩\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5055, lat: 31.2529 },\n          content: \"北外滩\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5055, lat: 31.2529 },\n          content: \"北外滩\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5055, lat: 31.2529 },\n          content: \"北外滩\",\n          show: false,\n        },\n        {\n          position: { lng: 121.5055, lat: 31.2529 },\n          content: \"北外滩\",\n          show: false,\n        },\n      ],\n      weatherData: null, //存储天气数据\n      city: \"310000\", //上海\n      selectedMarkerIndex: -1, // 记录选中的标记索引\n      dialogBox: \"点击下面的按钮以获得智能小助手建议～\",\n      WikiPage: [], // 新添加的空数组\n      searchPlace: \"上海\",\n      briefIntro:\"<p>暂时没有对该地点的简介哦～</p>\",\n\n      //点击获取点击地点的经度和纬度\n      clickLat: 31.23,\n      clickLng: 121.474,\n      clickAddress: \"上海市杨浦区四平路1239号\",\n\n      //设置搜索范围\n      nearby: {\n        center: {\n          lng: 121.474,\n          lat: 31.23\n        },\n        radius: 10000\n      },\n      placeKeyword: \"\",\n      startPlace: \"\",\n      startPosition: null,\n\n      endPlace: \"\",\n      endPosition: null,\n\n      planRoute: false,\n\n    };\n  },\n  watch: {\n    weatherData(newData) {\n      console.log(newData);\n      // 在这里执行你希望在 weatherData 更新后立即执行的逻辑\n      // console.log(this.weatherData);\n    },\n  },\n  created() {\n    this.getWeatherData();\n  },\n\n  mounted() {\n    this.mapInstance = this.$refs.map ? this.$refs.map.getMap() : null;\n    // this.getWeatherData();\n    this.searchWiki(\"上海\")\n  },\n\n  methods: {\n    //通过点击地图上的点获得该点具体的地点名称\n    handleMapClick(event) {\n      const point = new BMap.Point(event.point.lng, event.point.lat);\n      const geoc = new BMap.Geocoder();\n\n      // 调用百度地图 API 的逆地理编码方法获取地名\n      geoc.getLocation(point, (result) => {\n        if (result) {\n          const address = result.address; // 地名\n          const lng = result.point.lng; // 经度\n          const lat = result.point.lat; // 纬度\n\n          this.clickLat = lat;\n          this.clickLng = lng;\n          this.clickAddress = address;\n\n          // 处理获取到的地名、经纬度数据\n          console.log(\"地名:\", address);\n          console.log(\"经度:\", lng);\n          console.log(\"纬度:\", lat);\n        }\n      });\n    },\n    //放大地图\n    zoomIn() {\n      this.zoom += 1; // 放大地图缩放级别\n      // this.$refs.baiduMap.setZoom(this.zoom); // 调用 setZoom 方法更新地图缩放级别\n    },\n    //缩小地图\n    zoomOut() {\n      this.zoom -= 1; // 缩小地图缩放级别\n      // this.$refs.baiduMap.setZoom(this.zoom); // 调用 setZoom 方法更新地图缩放级别\n    },\n\n    //设置为起点\n    setStartPlace() {\n      this.startPlace = this.clickAddress\n      this.startPosition = { lat: this.clickLat, lng: this.clickLng }\n    },\n\n    //设置为终点\n    setEndPlace() {\n      this.endPlace = this.clickAddress\n      this.endPosition = { lat: this.clickLat, lng: this.clickLng }\n\n    },\n    PlanRoute() {\n      if (this.startPlace != \"\" && this.endPlace != \"\")\n        this.planRoute = true\n      else {\n        // 弹窗提醒用户设置起点和终点\n        alert(\"请设置起点和终点\");\n      }\n    },\n    StopPlanRoute() {\n      this.planRoute = false\n      this.startPlace = \"\"\n      this.endPlace = \"\"\n    },\n    //调用天气api，已经可以调取成功\n    getWeatherData() {\n      const key = \"\t3f6157ccb2e4ec191a030932e211ffaa\"; // 将 `your key` 替换成你的高德开发者key\n      const url = `https://restapi.amap.com/v3/weather/weatherInfo?key=${key}&city=${this.city}`;\n      console.log(\"获取天气\");\n      axios\n        .get(url)\n        .then((response) => {\n          if (response.status === 200) {\n            this.weatherData = response.data;\n            console.log(response.data);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n    //调用Wiki百科API\n    async searchWiki(keyword) {\n      try {\n        const response = await axios.get(\"https://zh.wikipedia.org/w/api.php\", {\n          params: {\n            format: \"json\",\n            action: \"query\",\n            generator: \"search\",\n            gsrnamespace: 0,\n            gsrlimit: 5,\n            prop: \"pageimages|extracts\",\n            pilimit: \"max\",\n            exintro: true,\n            explaintext: true,\n            exsentences: 1,\n            exlimit: \"max\",\n            origin: \"*\",\n            gsrsearch: keyword,\n          },\n        });\n        const pages = response.data.query.pages;\n        const wikiPages = [];\n        for (let pageId in pages) {\n          const page = pages[pageId];\n          const wikiPage = {\n            title: page.title,\n            thumbnail: page.thumbnail,\n            extract: page.extract,\n            url: \"\"\n          };\n          // 将title拼接成访问中文维基百科的链接\n          wikiPage.url = \"http://zh.wikipedia.org/wiki/\" + encodeURIComponent(page.title);\n          wikiPages.push(wikiPage);\n        }\n        this.WikiPage = wikiPages;\n        console.log(this.WikiPage);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    },\n    //得到景点介绍\n    getBriefIntro(place) {\n      axios({\n        method: 'post',\n        url: 'https://apis.tianapi.com/scenic/index',\n        data: Qs.stringify({ key: '1e12d5d1fb06599d02ef546b73e2c360', word: place }),\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      }).then((res) => {\n        if(res.data.code==200)\n          this.briefIntro = res.data.result.list[0].content;\n        else{\n          this.briefIntro=\"<p>暂时没有对该地点的简介哦～</p>\"\n        }\n        console.log(res.data)\n        console.log(res)\n      });\n    },\n    handleMarkerClick(marker, index) {\n      // const details = marker.name; // 假设标记对象中有一个属性 name 存储地点名称\n      console.log(\"点击了\" + index);\n      const details = this.markers[index].content;\n      console.log(details);\n      this.searchPlace = details;\n      //调用Wiki的接口\n      var href = this.searchWiki(details);\n      //调用景点介绍的接口\n      this.getBriefIntro(details)\n      //调用GPT接口\n      // this.initGPT3(details);\n    },\n\n    //点击穿衣按钮之后获取穿衣建议\n    getDressAdvice() {\n      const details =\n        \"已知今天上海的天气数据如下所示：\" +\n        \"湿度：\" +\n        this.weatherData.lives[0].humidity +\n        \"，温度：\" +\n        this.weatherData.lives[0].temperature +\n        \"，天气：\" +\n        this.weatherData.lives[0].weather +\n        \"，风力：\" +\n        this.weatherData.lives[0].windpower +\n        \"，请问可以给出穿衣建议吗？比如说今天适合穿什么样的衣服？比如如果温度高于25度就适合穿短袖，如果温度在17到25之间左右就可以穿衬衫等等（用可爱俏皮的语句直接生成一段话，50到80字左右，不要列出一点一点的，也不要太长）\";\n      console.log(details);\n      this.initGPT3(details, 1);\n      this.showResponse();\n    },\n    //点击出行按钮之后获取出行建议\n    getTravelAdvice() {\n      const details =\n        \"已知今天上海的天气数据如下所示：\" +\n        \"湿度：\" +\n        this.weatherData.lives[0].humidity +\n        \"，温度：\" +\n        this.weatherData.lives[0].temperature +\n        \"，天气：\" +\n        this.weatherData.lives[0].weather +\n        \"，风力：\" +\n        this.weatherData.lives[0].windpower +\n        \"，请问可以给出出行建议吗？就根据我给你的上海目前的天气信息给出，比如说如果今天下雨就建议打车或者地铁，如果今天天晴就建议骑自行车或者走路，如果风大就尽量不要骑车等等。（用可爱俏皮的语句直接生成一段话，50到80字左右，不要列出一点一点的，也不要太长）\";\n      console.log(details);\n      this.initGPT3(details, 1);\n      this.showResponse();\n    },\n    //点击天气概述按钮之后获取天气概述\n    getWeatherSummary() {\n      const details =\n        \"已知今天上海的天气数据如下所示：\" +\n        \"湿度：\" +\n        this.weatherData.lives[0].humidity +\n        \"，温度：\" +\n        this.weatherData.lives[0].temperature +\n        \"，天气：\" +\n        this.weatherData.lives[0].weather +\n        \"，风力：\" +\n        this.weatherData.lives[0].windpower +\n        \"，请你用可爱俏皮的语句，同时写一首唐诗来描述今天的天气，这首诗需要包含今天的天气特点以及人们的活动，景色等等\";\n      console.log(details);\n      this.initGPT3(details, 1);\n      this.showResponse();\n    },\n    showResponse() {\n      // 将回复显示在对话框中\n      this.dialogBox = \"正在生成中......\";\n    },\n\n    async initGPT3(details, choice) {\n      const API_KEY = \"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\"; //输入API Key\n      const openai = new OpenAI({\n        apiKey: API_KEY,\n        dangerouslyAllowBrowser: true,\n      });\n      console.log(\"正在生成介绍\" + details + \"的信息\");\n      const chatCompletion = await openai.chat.completions.create({\n        messages: [\n          {\n            role: \"user\",\n            content: `你好，${details}`,\n          },\n        ],\n        model: \"gpt-3.5-turbo\",\n      });\n      console.log(chatCompletion);\n      console.log(chatCompletion.choices[0].message.content);\n      // 说明此时是在生成智能出行小助手\n      if (choice == 1) {\n        //显示在消息框内\n        this.dialogBox = chatCompletion.choices[0].message.content;\n      }\n      else {\n\n      }\n    },\n\n  }\n};\n</script>\n\n<style>\n.map-weather-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  /* 将屏幕分为两列 */\n}\n\n.map {\n  /* position: relative; */\n  grid-column: 1 / 2;\n  /* 将map容器放在第一列 */\n  display: flex;\n  width: 97%;\n  height: 950px;\n}\n\n.zoom-controls {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  z-index: 9999;\n}\n\n.info {\n  grid-column: 2 / 3;\n}\n\n.weather-container {\n  /* position: absolute; */\n  /* display: flex; */\n  /* 将weather-container容器放在第二列 */\n  width: 96%;\n  height: 283px;\n  top: 10px;\n  left: 10px;\n  z-index: 9999;\n  background-color: #b0e2ff;\n  /* 设置背景颜色为浅蓝色 */\n  border-radius: 10px;\n  /* 设置圆角边框半径为10px */\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  /* 设置阴影效果 */\n  /* 添加其他样式 */\n}\n\n.weather-header {\n  margin-left: 28px;\n  margin-right: 28px;\n}\n\n.weather-details {\n  grid-column: 1 / 2;\n  /* 将details容器放在第一列 */\n  margin-left: 28px;\n}\n\n.weather-details-container {\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  /* 将屏幕分为四份，第一列占据一个份额，第二列占据三个份额 */\n}\n\n.weather-dialog-box {\n  width: 94%;\n  height: 110px;\n  margin-top: 10px;\n  background-color: whitesmoke;\n  border-radius: 6px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  /* 设置阴影效果 */\n  padding: 10px;\n  overflow: auto;\n  max-height: 100px;\n  /* 设置最大高度，超过该高度将显示滚动条 */\n}\n\n.dialog-content {\n  white-space: pre-wrap;\n  /* 处理换行符等空白字符 */\n}\n\n.wiki-search {\n  width: 96%;\n  height: 283px;\n  margin-top: 20px;\n  top: 10px;\n  left: 10px;\n  z-index: 9999;\n  background-color: #b0e2ff;\n  /* 设置背景颜色为浅蓝色 */\n  border-radius: 10px;\n  /* 设置圆角边框半径为10px */\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n\n}\n\n.searchresult {\n  max-height: 210px;\n  /* 设置最大高度 */\n  overflow: auto;\n  /* 当内容超出高度时显示滚动条 */\n  margin: 0px 20px 0px 20px;\n}\n\n.page-item {\n  display: flex;\n  margin-top: 10px;\n}\n\n.page-item img {\n  width: 100px;\n  height: 100px;\n  margin-right: 10px;\n}\n\n.page-content {\n  flex: 1;\n}\n\n.showAddress {\n  background-color: #fff;\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  z-index: 9999;\n  /* height:100px; */\n  /* width: 400px; */\n}\n\n.guide-container {\n  width: 96%;\n  height: 283px;\n  margin-top: 20px;\n  top: 10px;\n  left: 10px;\n  z-index: 9999;\n  background-color: #b0e2ff;\n  /* 设置背景颜色为浅蓝色 */\n  border-radius: 10px;\n  /* 设置圆角边框半径为10px */\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.route-details {\n  margin-left: 20px;\n}\n.brief-introduction{\n  width: 96%;\n  height: 283px;\n  margin-top: 20px;\n  top: 10px;\n  left: 10px;\n  z-index: 9999;\n  background-color: #b0e2ff;\n  /* 设置背景颜色为浅蓝色 */\n  border-radius: 10px;\n  /* 设置圆角边框半径为10px */\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAuB;;EAE3BA,KAAK,EAAC;AAAK;;EAYPA,KAAK,EAAC;AAAe;;EAKrBA,KAAK,EAAC;AAAa;;;;;;uBAnB9BC,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCJC,mBAAA,YAAe,EACfC,mBAAA,CA6BM,OA7BNC,UA6BM,GA5BJC,YAAA,CA2BYC,oBAAA;IA3BDP,KAAK,EAAC,KAAK;IAAEQ,MAAM,EAAEC,KAAA,CAAAD,MAAM;IAAGE,IAAI,EAAED,KAAA,CAAAC,IAAI;IAAG,mBAAiB,EAAC,IAAI;IAAEC,OAAK,EAAEC,QAAA,CAAAC;;sBAEnF,MAAuB,CAAvBV,mBAAA,oBAAuB,G,kBACvBF,mBAAA,CAIYa,SAAA,QAAAC,WAAA,CAJyBN,KAAA,CAAAO,OAAO,GAAzBC,MAAM,EAAEC,KAAK;2BAAhCC,YAAA,CAIYC,oBAAA;QAJmCC,GAAG,EAAEH,KAAK;QAAGI,QAAQ,EAAEL,MAAM,CAACK,QAAQ;QAAGC,QAAQ,EAAE,KAAK;QACpGZ,OAAK,EAAAa,MAAA,IAAEZ,QAAA,CAAAa,iBAAiB,CAACR,MAAM,EAAEC,KAAK;;0BACvC,MACkD,CADlDZ,YAAA,CACkDoB,mBAAA;UADvCC,OAAO,EAAEV,MAAM,CAACU,OAAO;UAAGC,UAAU,EAAE;YAAAC,KAAA;YAAAC,QAAA;UAAA,CAAkC;UAChFC,MAAM,EAAE;YAAAC,KAAA;YAAAC,MAAA;UAAA;;;;oCAEb9B,mBAAA,YAAe,EACfA,mBAAA,uHAAsH,EAEtHC,mBAAA,CAGM,OAHN8B,UAGM,GAFJ9B,mBAAA,CAAmC;MAA1BO,OAAK,EAAAwB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAExB,QAAA,CAAAyB,MAAA,IAAAzB,QAAA,CAAAyB,MAAA,IAAAD,IAAA,CAAM;OAAE,IAAE,GAC1BhC,mBAAA,CAAoC;MAA3BO,OAAK,EAAAwB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAExB,QAAA,CAAA0B,OAAA,IAAA1B,QAAA,CAAA0B,OAAA,IAAAF,IAAA,CAAO;OAAE,IAAE,E,GAE7BjC,mBAAA,qBAAwB,EACxBC,mBAAA,CAIM,OAJNmC,UAIM,GAHJnC,mBAAA,CAA4B,aAAvB,KAAG,GAAAoC,gBAAA,CAAG/B,KAAA,CAAAgC,QAAQ,kBACnBrC,mBAAA,CAA4B,aAAvB,KAAG,GAAAoC,gBAAA,CAAG/B,KAAA,CAAAiC,QAAQ,kBACnBtC,mBAAA,CAAgC,aAA3B,KAAG,GAAAoC,gBAAA,CAAG/B,KAAA,CAAAkC,YAAY,iB,GAGzBxC,mBAAA,UAAa,EACKM,KAAA,CAAAmC,SAAS,I,cAA3BzB,YAAA,CAC6E0B,qBAAA;;MAD/CC,KAAK,EAAErC,KAAA,CAAAsC,aAAa;MAAGC,GAAG,EAAEvC,KAAA,CAAAwC,WAAW;MAAEC,QAAQ,EAAC,IAAI;MACjF,eAAa,EAAE,IAAI;MAAGC,iBAAiB,EAAE,IAAI;MAAGC,KAAK,EAAE;oFAC1DjD,mBAAA,YAAe,EACfA,mBAAA,mFAAgF,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}